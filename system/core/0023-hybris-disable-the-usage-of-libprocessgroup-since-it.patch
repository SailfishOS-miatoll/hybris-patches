From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Franz-Josef Haider <franz.haider@jolla.com>
Date: Wed, 6 Jun 2018 09:33:03 +0200
Subject: [PATCH] (hybris) disable the usage of libprocessgroup, since it is
 incompatible.

Change-Id: Ie37ac0dcc5cabbf33de55c148009fdfff3e90c64
---
 init/Android.bp  |  4 ----
 init/init.cpp    |  2 --
 init/service.cpp | 18 ++++++++++++++++--
 3 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/init/Android.bp b/init/Android.bp
index dd67d04c0309fa00076a572edeb8ead5a181faf9..f2faaa2c2b1615ca8812360462f1d6d831618625 100644
--- a/init/Android.bp
+++ b/init/Android.bp
@@ -192,8 +192,6 @@ libinit_cc_defaults {
         "liblog",
         "liblogwrap",
         "liblp",
-        "libprocessgroup",
-        "libprocessgroup_setup",
         "libselinux",
         "libutils",
         "libziparchive",
@@ -495,7 +493,6 @@ cc_defaults {
         "libselinux",
         "libhidl-gen-utils",
         "liblog",
-        "libprocessgroup",
         "libprotobuf-cpp-lite",
     ],
 }
@@ -553,7 +550,6 @@ cc_defaults {
         "libhidl-gen-utils",
         "libhidlmetadata",
         "liblog",
-        "libprocessgroup",
         "libprotobuf-cpp-lite",
     ],
     proto: {
diff --git a/init/init.cpp b/init/init.cpp
index f7d84b7d062426392a1fdd619dd5991eb720083e..53d9158559a753089f08bf80529af81b99999889 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -58,8 +58,6 @@
 #include <libavb/libavb.h>
 #include <libgsi/libgsi.h>
 #include <libsnapshot/snapshot.h>
-#include <processgroup/processgroup.h>
-#include <processgroup/setup.h>
 #include <selinux/android.h>
 
 #include "action_parser.h"
diff --git a/init/service.cpp b/init/service.cpp
index f45f2b8a16ea0ae974101ca7121fe85044936ca4..c5d89752ff2d0e06e32992db19ad1881d63763ad 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -33,7 +33,6 @@
 #include <android-base/stringprintf.h>
 #include <android-base/strings.h>
 #include <cutils/sockets.h>
-#include <processgroup/processgroup.h>
 #include <selinux/selinux.h>
 
 #include "lmkd_service.h"
@@ -197,7 +196,13 @@ void Service::KillProcessGroup(int signal, bool report_oneshot) {
     // These functions handle their own logging, so no additional logging is needed.
     if (!process_cgroup_empty_) {
         LOG(INFO) << "Sending signal " << signal << " to service '" << name_ << "' (pid " << pid_
-                  << ") process group...";
+                  << ") process group... HYBRIS: killing PID instead of process group.";
+
+        kill(pid_, signal);
+
+// hybris: TODO?
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
         int max_processes = 0;
         int r;
         if (signal == SIGTERM) {
@@ -215,6 +220,8 @@ void Service::KillProcessGroup(int signal, bool report_oneshot) {
         }
 
         if (r == 0) process_cgroup_empty_ = true;
+#endif
+        process_cgroup_empty_ = true;
     }
 
     if (oom_score_adjust_ != DEFAULT_OOM_SCORE_ADJUST) {
@@ -297,9 +304,11 @@ void Service::Reap(const siginfo_t& siginfo) {
 
     if (flags_ & SVC_EXEC) UnSetExec();
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
     if (name_ == "zygote" || name_ == "zygote64") {
         removeAllEmptyProcessGroups();
     }
+#endif
 
     if (flags_ & SVC_TEMPORARY) return;
 
@@ -443,6 +452,7 @@ Result<void> Service::CheckConsole() {
 
 // Configures the memory cgroup properties for the service.
 void Service::ConfigureMemcg() {
+#if DISABLED_FOR_HYBRIS_SUPPORT
     if (swappiness_ != -1) {
         if (!setProcessGroupSwappiness(proc_attr_.uid, pid_, swappiness_)) {
             PLOG(ERROR) << "setProcessGroupSwappiness failed";
@@ -481,6 +491,7 @@ void Service::ConfigureMemcg() {
             PLOG(ERROR) << "setProcessGroupLimit failed";
         }
     }
+#endif
 }
 
 // Enters namespaces, sets environment variables, writes PID files and runs the service executable.
@@ -499,6 +510,7 @@ void Service::RunService(const std::optional<MountNamespace>& override_mount_nam
         descriptor.Publish();
     }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
     if (auto result = WritePidToFiles(&writepid_files_); !result.ok()) {
         LOG(ERROR) << "failed to write pid to files: " << result.error();
     }
@@ -669,6 +681,7 @@ Result<void> Service::Start() {
     start_order_ = next_start_order_++;
     process_cgroup_empty_ = false;
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
     bool use_memcg = swappiness_ != -1 || soft_limit_in_bytes_ != -1 || limit_in_bytes_ != -1 ||
                       limit_percent_ != -1 || !limit_property_.empty();
     errno = -createProcessGroup(proc_attr_.uid, pid_, use_memcg);
@@ -691,6 +704,7 @@ Result<void> Service::Start() {
     if (char byte = 1; write((*pipefd)[1], &byte, 1) < 0) {
         return ErrnoError() << "sending notification failed";
     }
+#endif
 
     NotifyStateChange("running");
     reboot_on_failure.Disable();
