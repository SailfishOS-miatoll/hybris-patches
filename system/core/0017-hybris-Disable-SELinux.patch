From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matti=20Lehtim=C3=A4ki?= <matti.lehtimaki@gmail.com>
Date: Thu, 9 Feb 2017 21:48:19 +0200
Subject: [PATCH] (hybris) Disable SELinux
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I0511b2a0de1b20996f4fb8e9f3569acb41e2cf0f

(hybris) more SELinux disablement

Change-Id: Ic1bc474e993f2b66ab9114e88d7ec4f718a99d5c
Signed-off-by: Simonas Leleiva <simonas.leleiva@meramo.co.uk>

(hybris) disable remnants of SELinux which currently break

Change-Id: I252a8399c9853d993fc17d769bfbb2e4c722cfe8

(hybris) disable some more selinux functionality.

Change-Id: Ie63eb13b73d626668b32041fec4400cf2edd2fe5

(hybris) Disable SELinux init.

Sailfish OS SELinux initialization is done by systemd.
Conflicting init has been resolved by disabling SELinux
initialization from droid hal init.

Change-Id: I8a2a729671d224c4cc266a8219bee357611ded51
Signed-off-by: Matti Kosola <matti.kosola@jolla.com>
Signed-off-by: Björn Bidar <theodorstormgrade@gmail.com>

(hybris) Disable unused code that was disabled by previous patches.

Change-Id: I2a78d91094495fad7b3cf514dd437d72a0718706
Signed-off-by: Björn Bidar <theodorstormgrade@gmail.com>

(hybris) allow second stage init previously disabled by selinux work

Signed-off-by: Simonas Leleiva <simonas.leleiva@jolla.com>
Change-Id: I1089428e88e7d94457f76745b23f44728dba8f6e

(hybris) execve service

Signed-off-by: Simonas Leleiva <simonas.leleiva@jolla.com>
Change-Id: I2efa4048bc2e4da848a61e24d8ef8b1824a81f06
---
 init/first_stage_init.cpp |  4 ++++
 init/init.cpp             | 10 ++++++++++
 init/property_service.cpp |  5 +++++
 init/selinux.cpp          | 21 ++++++++++++++++++++-
 init/service.cpp          | 15 +++++++++++++--
 init/service_utils.cpp    |  2 ++
 init/subcontext.cpp       |  2 ++
 init/util.cpp             |  8 ++++++++
 8 files changed, 64 insertions(+), 3 deletions(-)

diff --git a/init/first_stage_init.cpp b/init/first_stage_init.cpp
index bb8ddbd6ca3ce1f19dfff595b65883e1abc500b4..6884fd1f7a103daf4d841397b34bc159da67c7f4 100644
--- a/init/first_stage_init.cpp
+++ b/init/first_stage_init.cpp
@@ -53,6 +53,8 @@ using namespace std::literals;
 
 namespace fs = std::filesystem;
 
+#define SYSTEMD_SELINUX
+
 namespace android {
 namespace init {
 
@@ -252,7 +254,9 @@ int FirstStageMain(int argc, char** argv) {
     gid_t groups[] = {AID_READPROC};
     CHECKCALL(setgroups(arraysize(groups), groups));
     //CHECKCALL(mount("sysfs", "/sys", "sysfs", 0, NULL));
+#ifndef SYSTEMD_SELINUX
     CHECKCALL(mount("selinuxfs", "/sys/fs/selinux", "selinuxfs", 0, NULL));
+#endif
 
     CHECKCALL(mknod("/dev/kmsg", S_IFCHR | 0600, makedev(1, 11)));
 
diff --git a/init/init.cpp b/init/init.cpp
index 5697eb0dfaf8b4a0315245c286842e3b50022cf4..c94ace75fc9dd76024d82f709b8158e80661128f 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -102,6 +102,8 @@ using android::base::Trim;
 using android::fs_mgr::AvbHandle;
 using android::snapshot::SnapshotManager;
 
+#define SYSTEMD_SELINUX
+
 namespace android {
 namespace init {
 
@@ -510,10 +512,13 @@ static Result<void> wait_for_coldboot_done_action(const BuiltinArguments& args)
 static Result<void> SetupCgroupsAction(const BuiltinArguments&) {
     // Have to create <CGROUPS_RC_DIR> using make_dir function
     // for appropriate sepolicy to be set for it
+
+#if DISABLED_FOR_HYBRIS_SUPPORT
     make_dir(android::base::Dirname(CGROUPS_RC_PATH), 0711);
     if (!CgroupSetup()) {
         return ErrnoError() << "Failed to setup cgroups";
     }
+#endif
 
     return {};
 }
@@ -744,9 +749,12 @@ static void RecordStageBoottimes(const boot_clock::time_point& second_stage_star
 
     SetProperty("ro.boottime.init.first_stage",
                 std::to_string(selinux_start_time_ns - first_stage_start_time_ns));
+    // Mer: this seems to cause problems
+#if 0
     SetProperty("ro.boottime.init.selinux",
                 std::to_string(second_stage_start_time.time_since_epoch().count() -
                                selinux_start_time_ns));
+#endif
     if (auto init_module_time_str = getenv(kEnvInitModuleDurationMs); init_module_time_str) {
         SetProperty("ro.boottime.init.modules", init_module_time_str);
         unsetenv(kEnvInitModuleDurationMs);
@@ -897,10 +905,12 @@ int SecondStageMain(int argc, char** argv) {
     // Mount extra filesystems required during second stage init
     MountExtraFilesystems();
 
+#ifndef SYSTEMD_SELINUX
     // Now set up SELinux for second stage.
     SelinuxSetupKernelLogging();
     SelabelInitialize();
     SelinuxRestoreContext();
+#endif
 
     Epoll epoll;
     if (auto result = epoll.Open(); !result.ok()) {
diff --git a/init/property_service.cpp b/init/property_service.cpp
index ece449eba1e80db815a2be5120a507f8cfa605d6..22c4d396f422154208daf001577dc6e81a34cfda 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -159,6 +159,8 @@ bool CanReadProperty(const std::string& source_context, const std::string& name)
 
 static bool CheckMacPerms(const std::string& name, const char* target_context,
                           const char* source_context, const ucred& cr) {
+    // Disable permission check in Mer
+    return true;
     if (!target_context || !source_context) {
         return false;
     }
@@ -308,12 +310,15 @@ class SocketConnection {
     }
 
     bool GetSourceContext(std::string* source_context) const {
+#if 0
         char* c_source_context = nullptr;
         if (getpeercon(socket_, &c_source_context) != 0) {
             return false;
         }
         *source_context = c_source_context;
         freecon(c_source_context);
+#endif
+        *source_context = "";
         return true;
     }
 
diff --git a/init/selinux.cpp b/init/selinux.cpp
index be8c5542f79b8406320024a7d4dd7f50cc8fc3a5..1e802b71603db2ba9383ce69ffc1ce2bfe578935 100644
--- a/init/selinux.cpp
+++ b/init/selinux.cpp
@@ -95,6 +95,8 @@ using android::base::unique_fd;
 using android::fs_mgr::AvbHandle;
 using android::snapshot::SnapshotManager;
 
+#define SYSTEMD_SELINUX
+
 namespace android {
 namespace init {
 
@@ -102,6 +104,8 @@ namespace {
 
 enum EnforcingStatus { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
 EnforcingStatus StatusFromProperty() {
     EnforcingStatus status = SELINUX_ENFORCING;
 
@@ -219,6 +223,7 @@ bool ForkExecveAndWaitForCompletion(const char* filename, char* const argv[]) {
         return false;
     }
 }
+#endif
 
 bool ReadFirstLine(const char* file, std::string* line) {
     line->clear();
@@ -232,6 +237,8 @@ bool ReadFirstLine(const char* file, std::string* line) {
     return true;
 }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
 Result<std::string> FindPrecompiledSplitPolicy() {
     std::string precompiled_sepolicy;
     // If there is an odm partition, precompiled_sepolicy will be in
@@ -287,6 +294,8 @@ Result<std::string> FindPrecompiledSplitPolicy() {
     return precompiled_sepolicy;
 }
 
+#endif
+
 bool GetVendorMappingVersion(std::string* plat_vers) {
     if (!ReadFirstLine("/vendor/etc/selinux/plat_sepolicy_vers.txt", plat_vers)) {
         PLOG(ERROR) << "Failed to read /vendor/etc/selinux/plat_sepolicy_vers.txt";
@@ -305,6 +314,7 @@ bool IsSplitPolicyDevice() {
     return access(plat_policy_cil_file, R_OK) != -1;
 }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
 std::optional<const char*> GetUserdebugPlatformPolicyFile() {
     // See if we need to load userdebug_plat_sepolicy.cil instead of plat_sepolicy.cil.
     const char* force_debuggable_env = getenv("INIT_FORCE_DEBUGGABLE");
@@ -507,10 +517,13 @@ bool OpenMonolithicPolicy(PolicyFile* policy_file) {
     policy_file->path = kSepolicyFile;
     return true;
 }
+#endif
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
 constexpr const char* kSigningCertRelease =
         "/system/etc/selinux/com.android.sepolicy.cert-release.der";
 constexpr const char* kFsVerityProcPath = "/proc/sys/fs/verity";
+#endif
 const std::string kSepolicyApexMetadataDir = "/metadata/sepolicy/";
 const std::string kSepolicyApexSystemDir = "/system/etc/selinux/apex/";
 const std::string kSepolicyZip = "SEPolicy.zip";
@@ -525,6 +538,7 @@ const std::vector<std::string> kApexSepolicy{"apex_file_contexts", "apex_propert
                                              "apex_service_contexts", "apex_seapp_contexts",
                                              "apex_test"};
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
 Result<void> PutFileInTmpfs(ZipArchiveHandle archive, const std::string& fileName) {
     ZipEntry entry;
     std::string dstPath = kTmpfsDir + fileName;
@@ -727,6 +741,7 @@ void SelinuxSetEnforcement() {
         LOG(FATAL) << "Unable to write to /sys/fs/selinux/checkreqprot: " << result.error();
     }
 }
+#endif
 
 constexpr size_t kKlogMessageSize = 1024;
 
@@ -911,6 +926,7 @@ void MountMissingSystemPartitions() {
     }
 }
 
+#ifndef SYSTEMD_SELINUX
 static void LoadSelinuxPolicy(std::string& policy) {
     LOG(INFO) << "Loading SELinux policy";
 
@@ -919,6 +935,7 @@ static void LoadSelinuxPolicy(std::string& policy) {
         PLOG(FATAL) << "SELinux:  Could not load policy";
     }
 }
+#endif
 
 // The SELinux setup process is carefully orchestrated around snapuserd. Policy
 // must be loaded off dynamic partitions, and during an OTA, those partitions
@@ -936,6 +953,7 @@ static void LoadSelinuxPolicy(std::string& policy) {
 //
 // After this sequence, it is safe to enable enforcing mode and continue booting.
 int SetupSelinux(char** argv) {
+#ifndef SYSTEMD_SELINUX
     SetStdioToDevNull(argv);
     InitKernelLogging(argv);
 
@@ -992,8 +1010,9 @@ int SetupSelinux(char** argv) {
     }
 
     setenv(kEnvSelinuxStartedAt, std::to_string(start_time.time_since_epoch().count()).c_str(), 1);
+#endif
 
-    const char* path = "/system/bin/init";
+    const char* path = "/sbin/droid-hal-init";
     const char* args[] = {path, "second_stage", nullptr};
     execv(path, const_cast<char**>(args));
 
diff --git a/init/service.cpp b/init/service.cpp
index 7e43061c4c7e26bc1c3dda6a9fe8f5803696f749..a90887eb16521d4cf5cd6684f3ba441e7ca98028 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -64,6 +64,9 @@ using android::base::WriteStringToFile;
 namespace android {
 namespace init {
 
+// Disable SELinux
+/*
+
 static Result<std::string> ComputeContextFromExecutable(const std::string& service_path) {
     std::string computed_context;
 
@@ -104,6 +107,7 @@ static Result<std::string> ComputeContextFromExecutable(const std::string& servi
     }
     return computed_context;
 }
+*/
 
 static bool ExpandArgsAndExecv(const std::vector<std::string>& args, bool sigstop) {
     std::vector<std::string> expanded_args;
@@ -240,11 +244,15 @@ void Service::SetProcessAttributesAndCaps() {
         LOG(FATAL) << "cannot set attribute for " << name_ << ": " << result.error();
     }
 
+// Disable SELinux
+/*
+
     if (!seclabel_.empty()) {
         if (setexeccon(seclabel_.c_str()) < 0) {
             PLOG(FATAL) << "cannot setexeccon('" << seclabel_ << "') for " << name_;
         }
     }
+*/
 
     if (capabilities_) {
         if (!SetCapsForExec(*capabilities_)) {
@@ -514,6 +522,7 @@ void Service::RunService(const std::optional<MountNamespace>& override_mount_nam
     if (task_profiles_.size() > 0 && !SetTaskProfiles(getpid(), task_profiles_)) {
         LOG(ERROR) << "failed to set task profiles";
     }
+#endif
 
     // As requested, set our gid, supplemental gids, uid, context, and
     // priority. Aborts on failure.
@@ -577,6 +586,9 @@ Result<void> Service::Start() {
     }
 
     std::string scon;
+// Disable SELinux
+/*
+
     if (!seclabel_.empty()) {
         scon = seclabel_;
     } else {
@@ -586,7 +598,7 @@ Result<void> Service::Start() {
         }
         scon = *result;
     }
-
+*/
     // APEXd is always started in the "current" namespace because it is the process to set up
     // the current namespace.
     const bool is_apexd = args_[0] == "/system/bin/apexd";
@@ -610,7 +622,6 @@ Result<void> Service::Start() {
     }
 
     post_data_ = ServiceList::GetInstance().IsPostData();
-
     LOG(INFO) << "starting service '" << name_ << "'...";
 
     std::vector<Descriptor> descriptors;
diff --git a/init/service_utils.cpp b/init/service_utils.cpp
index d19f5eef5d0fd68621e72b3dfc7316fc26706cac..f01b93f5a8f2beece9e67f9e1268cb6123745532 100644
--- a/init/service_utils.cpp
+++ b/init/service_utils.cpp
@@ -279,6 +279,7 @@ Result<void> SetProcessAttributes(const ProcessAttributes& attr) {
     return {};
 }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
 Result<void> WritePidToFiles(std::vector<std::string>* files) {
     // See if there were "writepid" instructions to write to files under cpuset path.
     std::string cpuset_path;
@@ -325,6 +326,7 @@ Result<void> WritePidToFiles(std::vector<std::string>* files) {
     }
     return {};
 }
+#endif
 
 }  // namespace init
 }  // namespace android
diff --git a/init/subcontext.cpp b/init/subcontext.cpp
index 7aa4a9d2cb1cc58a2d44c6eb29cfee28aa6de4d2..4e573854eda7c52b47bcebc897e6f0d2e3cc745a 100644
--- a/init/subcontext.cpp
+++ b/init/subcontext.cpp
@@ -215,9 +215,11 @@ void Subcontext::Fork() {
         // We don't switch contexts if we're running the unit tests.  We don't use std::optional,
         // since we still need a real context string to pass to the builtin functions.
         if (context_ != kTestContext) {
+#if 0
             if (setexeccon(context_.c_str()) < 0) {
                 PLOG(FATAL) << "Could not set execcon for '" << context_ << "'";
             }
+#endif
         }
 #if defined(__ANDROID__)
         // subcontext init runs in "default" mount namespace
diff --git a/init/util.cpp b/init/util.cpp
index 5b3a73c0d333db82d039b9c79c8002b7538703e4..f12403fe7e65f3742e7e09cf2bbf892dd5af8014 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -88,18 +88,22 @@ Result<uid_t> DecodeUid(const std::string& name) {
  */
 Result<int> CreateSocket(const std::string& name, int type, bool passcred, bool should_listen,
                          mode_t perm, uid_t uid, gid_t gid, const std::string& socketcon) {
+#if DISABLED_FOR_HYBRIS_SUPPORT
     if (!socketcon.empty()) {
         if (setsockcreatecon(socketcon.c_str()) == -1) {
             return ErrnoError() << "setsockcreatecon(\"" << socketcon << "\") failed";
         }
     }
+#endif
 
     android::base::unique_fd fd(socket(PF_UNIX, type, 0));
     if (fd < 0) {
         return ErrnoError() << "Failed to open socket '" << name << "'";
     }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
     if (!socketcon.empty()) setsockcreatecon(nullptr);
+#endif
 
     struct sockaddr_un addr;
     memset(&addr, 0 , sizeof(addr));
@@ -110,10 +114,12 @@ Result<int> CreateSocket(const std::string& name, int type, bool passcred, bool
         return ErrnoError() << "Failed to unlink old socket '" << name << "'";
     }
 
+#if 0
     std::string secontext;
     if (SelabelLookupFileContext(addr.sun_path, S_IFSOCK, &secontext) && !secontext.empty()) {
         setfscreatecon(secontext.c_str());
     }
+#endif
 
     if (passcred) {
         int on = 1;
@@ -125,9 +131,11 @@ Result<int> CreateSocket(const std::string& name, int type, bool passcred, bool
     int ret = bind(fd, (struct sockaddr *) &addr, sizeof (addr));
     int savederrno = errno;
 
+#if 0
     if (!secontext.empty()) {
         setfscreatecon(nullptr);
     }
+#endif
 
     auto guard = android::base::make_scope_guard([&addr] { unlink(addr.sun_path); });
 
